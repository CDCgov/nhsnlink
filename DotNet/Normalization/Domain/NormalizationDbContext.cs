// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using LantanaGroup.Link.Normalization.Domain.JsonObjects;
using LantanaGroup.Link.Shared.Application.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Design;
using System.Text.Json;

namespace LantanaGroup.Link.Normalization.Domain.Entities;

public partial class NormalizationDbContext : DbContext
{
    public NormalizationDbContext(DbContextOptions<NormalizationDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<NormalizationConfig> NormalizationConfigs { get; set; }
    public virtual DbSet<RetryEntity> EventRetries { get; set; }
    public virtual DbSet<Operation> Operations { get; set; }
    public virtual DbSet<OperationResourceType> OperationResourceTypes { get; set; }
    public virtual DbSet<ResourceType> ResourceTypes { get; set; }
    public virtual DbSet<OperationSequence> OperationSequences { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<NormalizationConfig>(entity =>
        {
            entity.Property(e => e.CreateDate).HasDefaultValueSql("(getutcdate())");
        });

        modelBuilder.Entity<NormalizationConfig>()
            .Property(b => b.Id)
            .HasConversion(
                v => new Guid(v),
                v => v.ToString()
            );

        modelBuilder.Entity<NormalizationConfig>()
            .Property(b => b.OperationSequence)
            .HasConversion(
                v => JsonSerializer.Serialize(v, new JsonSerializerOptions()),
                v => JsonSerializer.Deserialize<Dictionary<string, INormalizationOperation>>(v, new JsonSerializerOptions())
            );

        //Retry Repository
        modelBuilder.Entity<RetryEntity>()
            .Property(x => x.Headers)
            .HasConversion(
                           v => JsonSerializer.Serialize(v, new JsonSerializerOptions()),
                                          v => JsonSerializer.Deserialize<Dictionary<string, string>>(v, new JsonSerializerOptions())
                                                 );
        modelBuilder.Entity<Operation>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreateDate).HasDefaultValueSql("(getutcdate())");
        });

        modelBuilder.Entity<OperationResourceType>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.Operation).WithMany(p => p.OperationResourceTypes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OperationResourceTypes_Operation");

            entity.HasOne(d => d.ResourceType).WithMany(p => p.OperationResourceTypes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OperationResourceTypes_ResourceType");
        });

        modelBuilder.Entity<OperationSequence>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreateDate).HasDefaultValueSql("(getutcdate())");

            entity.HasOne(d => d.OperationResourceType).WithMany(p => p.OperationSequences)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OperationSequence_OperationResourceTypes");
        });

        modelBuilder.Entity<ResourceType>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);

    public class NormalizationDbContextFactory : IDesignTimeDbContextFactory<NormalizationDbContext>
    {
        public NormalizationDbContext CreateDbContext(string[] args)
        {
            var optionsBuilder = new DbContextOptionsBuilder<NormalizationDbContext>();
            optionsBuilder.UseSqlServer();

            return new NormalizationDbContext(optionsBuilder.Options);
        }
    }
}