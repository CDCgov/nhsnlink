package com.lantanagroup.link.measureeval.services;

import ca.uhn.fhir.context.FhirContext;
import org.hl7.fhir.r4.model.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Calendar;

/**
 * Overview
 * The MeasureEvaluatorEvaluationTests class is a set of JUnit tests designed to validate the functionality of a
 * FHIR-based measure evaluation process. These tests evaluate cohort, proportion, ratio, and continuous variable
 * measures using the FHIR R4 standard. The tests cover various scenarios, including measures that return true or
 * false, measures with value sets, and measures with supplemental data elements (SDEs).
 * Summary
 * This test class performs validation on FHIR MeasureReports generated by the MeasureEvaluator.
 * It ensures that the evaluation of clinical quality measures complies with the FHIR R4 specifications,
 * validating aspects such as:
 * 	•	Measurement periods
 * 	•	Population counts
 * 	•	Evaluated resources
 * 	•	Measure scores
 * 	•	Supplemental data elements
 * 	Notes
 * 	•	This class provides a comprehensive set of tests for different measure types and scenarios, ensuring robust
 * 	    validation of the measure evaluation logic.
 * 	•	Helper methods centralize common validation tasks to reduce redundancy and improve readability.
 * 	•	Tests focus on key FHIR elements such as Period, MeasureReport, and evaluated resources, ensuring compliance
 * 	    with the FHIR R4 standard.
 */
class MeasureEvaluatorEvaluationTests {

    // A cached instance of FhirContext for working with the FHIR R4 model.
    private final FhirContext fhirContext = FhirContext.forR4Cached();

    /**
     * Tests a simple cohort measure where the initial-population is expected to evaluate to true (count of 1).
     * Validations:
     * 	•	The measurement period matches the expected dates.
     * 	•	The initial-population count is 1.
     */
    @Test
    void simpleCohortMeasureTrueTest() {
        var measurePackage = KnowledgeArtifactBuilder.SimpleCohortMeasureTrue.bundle();
        validateMeasurePackage(measurePackage);
        var evaluator = MeasureEvaluator.compile(fhirContext, measurePackage, false);
        var report = evaluator.evaluate(new DateTimeType("2024-01-01"), new DateTimeType("2024-12-31"),
                new StringType("Patient/simple-patient"), PatientDataBuilder.simplePatientOnlyBundle());

        // test measurement period results
        validateMeasurementPeriod(report.getPeriod(), 2024, 0, 1, 2024, 11, 31);

        // test population results
        Assertions.assertEquals(1, getPopulation("initial-population", report).getCount());
    }

    /**
     * Tests a simple cohort measure where the initial-population is expected to evaluate to false (count of 0).
     * Validations:
     * 	•	The measurement period matches the expected dates.
     * 	•	The initial-population count is 0.
     */
    @Test
    void simpleCohortMeasureFalseTest() {
        var measurePackage = KnowledgeArtifactBuilder.SimpleCohortMeasureFalse.bundle();
        validateMeasurePackage(measurePackage);
        var evaluator = MeasureEvaluator.compile(fhirContext, measurePackage, false);
        var report = evaluator.evaluate(new DateTimeType("2024-01-01"), new DateTimeType("2024-12-31"),
                new StringType("Patient/simple-patient"), PatientDataBuilder.simplePatientOnlyBundle());

        // test measurement period results
        validateMeasurementPeriod(report.getPeriod(), 2024, 0, 1, 2024, 11, 31);

        // test population results
        Assertions.assertEquals(0, getPopulation("initial-population", report).getCount());
    }

    /**
     * Tests a cohort measure with a value set where the initial-population is expected to evaluate to true.
     * Validations:
     * 	•	The measurement period matches the expected dates.
     * 	•	The initial-population count is 1.
     * 	•	Evaluated resources include both the patient and the encounter.
     */
    @Test
    void cohortMeasureWithValueSetTrueTest() {
        var measurePackage = KnowledgeArtifactBuilder.CohortMeasureWithValueSetTrue.bundle();
        validateMeasurePackage(measurePackage);
        var evaluator = MeasureEvaluator.compile(fhirContext, measurePackage, false);
        var report = evaluator.evaluate(new DateTimeType("2024-01-01"), new DateTimeType("2024-12-31"),
                new StringType("Patient/simple-patient"), PatientDataBuilder.simplePatientAndEncounterBundle());

        // test measurement period results
        validateMeasurementPeriod(report.getPeriod(), 2024, 0, 1, 2024, 11, 31);

        // test population results
        Assertions.assertEquals(1, getPopulation("initial-population", report).getCount());

        // test evaluated resources
        Assertions.assertTrue(report.hasEvaluatedResource());
        Assertions.assertEquals(2, report.getEvaluatedResource().size());
        Assertions.assertTrue(report.getEvaluatedResourceFirstRep().hasReference());
        Assertions.assertEquals("Encounter/simple-encounter", report.getEvaluatedResourceFirstRep().getReference());
        Assertions.assertTrue(report.getEvaluatedResource().get(1).hasReference());
        Assertions.assertEquals("Patient/simple-patient", report.getEvaluatedResource().get(1).getReference());
    }

    /**
     * Tests a cohort measure with a value set where the initial-population is expected to evaluate to false.
     * Validations:
     * 	•	The measurement period matches the expected dates.
     * 	•	The initial-population count is 0.
     */
    @Test
    void cohortMeasureWithValueSetFalseTest() {
        var measurePackage = KnowledgeArtifactBuilder.CohortMeasureWithValueSetFalse.bundle();
        validateMeasurePackage(measurePackage);
        var evaluator = MeasureEvaluator.compile(fhirContext, measurePackage, false);
        var report = evaluator.evaluate(new DateTimeType("2024-01-01"), new DateTimeType("2024-12-31"),
                new StringType("Patient/simple-patient"), PatientDataBuilder.simplePatientAndEncounterBundle());

        // test measurement period results
        validateMeasurementPeriod(report.getPeriod(), 2024, 0, 1, 2024, 11, 31);

        // test population results
        Assertions.assertEquals(0, getPopulation("initial-population", report).getCount());
    }

    /**
     * Tests a cohort measure with supplemental data elements (SDEs) where the initial-population is expected to
     * evaluate to true.
     * Validations:
     * 	•	The measurement period matches the expected dates.
     * 	•	The initial-population count is 1.
     * 	•	Evaluated resources include patient, encounter, and condition.
     * 	•	The report contains an SDE reference to a contained Condition.
     */
    @Test
    void cohortMeasureWithSDETest() {
        var measurePackage = KnowledgeArtifactBuilder.CohortMeasureWithSDE.bundle();
        validateMeasurePackage(measurePackage);
        var evaluator = MeasureEvaluator.compile(fhirContext, measurePackage, false);
        var report = evaluator.evaluate(new DateTimeType("2024-01-01"), new DateTimeType("2024-12-31"),
                new StringType("Patient/simple-patient"), PatientDataBuilder.simplePatientEncounterAndConditionBundle());

        // test measurement period results
        validateMeasurementPeriod(report.getPeriod(), 2024, 0, 1, 2024, 11, 31);

        // test population results
        Assertions.assertEquals(1, getPopulation("initial-population", report).getCount());

        // test evaluated resources
        Assertions.assertTrue(report.hasEvaluatedResource());
        Assertions.assertEquals(3, report.getEvaluatedResource().size());

        // test extensions, references, and contained
        Assertions.assertTrue(report.hasExtension("http://hl7.org/fhir/5.0/StructureDefinition/extension-MeasureReport.supplementalDataElement.reference"));
        var extension = report.getExtensionByUrl("http://hl7.org/fhir/5.0/StructureDefinition/extension-MeasureReport.supplementalDataElement.reference");
        Assertions.assertTrue(extension.hasValue());
        Assertions.assertTrue(extension.getValue() instanceof Reference);
        var reference = (Reference) extension.getValue();
        Assertions.assertEquals("#TST-simple-condition", reference.getReference());
        Assertions.assertTrue(report.hasContained());
        Assertions.assertEquals(1, report.getContained().size());
        Assertions.assertTrue(report.getContained().get(0) instanceof Condition);
        var condition = (Condition) report.getContained().get(0);
        Assertions.assertEquals("TST-simple-condition", condition.getIdPart());
    }

    /**
     * Tests a proportion measure where all conditions are true and no exclusions exist.
     * Validations:
     * 	•	The measurement period matches the expected dates.
     * 	•	The measure score is 1.0.
     * 	•	Population counts:
     * 	    •	initial-population: 1
     * 	    •	numerator: 1
     * 	    •	denominator: 1
     * 	    •	Exclusions (numerator-exclusion and denominator-exclusion): 0
     */
    @Test
    void simpleProportionMeasureAllTrueNoExclusionTest() {
        var measurePackage = KnowledgeArtifactBuilder.SimpleProportionMeasureAllTrueNoExclusion.bundle();
        validateMeasurePackage(measurePackage);
        var evaluator = MeasureEvaluator.compile(fhirContext, measurePackage, false);
        var report = evaluator.evaluate(new DateTimeType("2024-01-01"), new DateTimeType("2024-12-31"),
                new StringType("Patient/simple-patient"), PatientDataBuilder.simplePatientOnlyBundle());

        // test measurement period results
        validateMeasurementPeriod(report.getPeriod(), 2024, 0, 1, 2024, 11, 31);

        // test measure score
        Assertions.assertEquals(1.0, report.getGroupFirstRep().getMeasureScore().getValue().doubleValue());

        // test population results
        Assertions.assertEquals(1, getPopulation("initial-population", report).getCount());
        Assertions.assertEquals(1, getPopulation("numerator", report).getCount());
        Assertions.assertEquals(0, getPopulation("numerator-exclusion", report).getCount());
        Assertions.assertEquals(1, getPopulation("denominator", report).getCount());
        Assertions.assertEquals(0, getPopulation("denominator-exclusion", report).getCount());
    }

    /**
     * Tests a proportion measure where all conditions are false.
     * Validations:
     * 	•	The measurement period matches the expected dates.
     * 	•	The measure score is null.
     * 	•	Population counts:
     * 	    •	initial-population, numerator, denominator: 0
     * 	    •	Exclusions: 0
     */
    @Test
    void simpleProportionMeasureAllFalseTest() {
        var measurePackage = KnowledgeArtifactBuilder.SimpleProportionMeasureAllFalse.bundle();
        validateMeasurePackage(measurePackage);
        var evaluator = MeasureEvaluator.compile(fhirContext, measurePackage, false);
        var report = evaluator.evaluate(new DateTimeType("2024-01-01"), new DateTimeType("2024-12-31"),
                new StringType("Patient/simple-patient"), PatientDataBuilder.simplePatientOnlyBundle());

        // test measurement period results
        validateMeasurementPeriod(report.getPeriod(), 2024, 0, 1, 2024, 11, 31);

        // test measure score
        Assertions.assertNull(report.getGroupFirstRep().getMeasureScore().getValue());

        // test population results
        Assertions.assertEquals(0, getPopulation("initial-population", report).getCount());
        Assertions.assertEquals(0, getPopulation("numerator", report).getCount());
        Assertions.assertEquals(0, getPopulation("numerator-exclusion", report).getCount());
        Assertions.assertEquals(0, getPopulation("denominator", report).getCount());
        Assertions.assertEquals(0, getPopulation("denominator-exclusion", report).getCount());
    }

    /**
     * Tests a ratio measure with valid numerator and denominator values.
     * Validations:
     * 	•	The measurement period matches the expected dates.
     * 	•	The measure score is 1.0.
     * 	•	Population counts:
     * 	    •	initial-population, numerator, denominator: 1
     * 	    •	Evaluated resources include the encounter.
     */
    @Test
    void simpleRatioMeasureTest() {
        var measurePackage = KnowledgeArtifactBuilder.SimpleRatioMeasure.bundle();
        validateMeasurePackage(measurePackage);
        var evaluator = MeasureEvaluator.compile(fhirContext, measurePackage, false);
        var report = evaluator.evaluate(new DateTimeType("2024-01-01"), new DateTimeType("2024-12-31"),
                new StringType("Patient/simple-patient"), PatientDataBuilder.simplePatientAndEncounterBundle());

        // test measurement period results
        validateMeasurementPeriod(report.getPeriod(), 2024, 0, 1, 2024, 11, 31);

        // test measure score
        Assertions.assertEquals(1.0, report.getGroupFirstRep().getMeasureScore().getValue().doubleValue());

        // test population results
        Assertions.assertEquals(1, getPopulation("initial-population", report).getCount());
        Assertions.assertEquals(1, getPopulation("numerator", report).getCount());
        Assertions.assertEquals(1, getPopulation("denominator", report).getCount());

        // test evaluated resources
        Assertions.assertTrue(report.hasEvaluatedResource());
        Assertions.assertEquals("Encounter/simple-encounter", report.getEvaluatedResourceFirstRep().getReference());
    }

    /**
     * Tests a continuous variable measure with a valid measure-population.
     * Validations:
     * 	•	The measurement period matches the expected dates.
     * 	•	The measure score is null.
     * 	•	Population counts:
     * 	    •	initial-population: 1
     * 	    •	measure-population: 1
     * 	    •	measure-population-exclusion: 0
     * 	•	Evaluated resources include the encounter.
     */
    @Test
    void simpleContinuousVariableMeasureTest() {
        var measurePackage = KnowledgeArtifactBuilder.SimpleContinuousVariableMeasure.bundle();
        validateMeasurePackage(measurePackage);
        var evaluator = MeasureEvaluator.compile(fhirContext, KnowledgeArtifactBuilder.SimpleContinuousVariableMeasure.bundle(), false);
        var report = evaluator.evaluate(new DateTimeType("2024-01-01"), new DateTimeType("2024-12-31"),
                new StringType("Patient/simple-patient"), PatientDataBuilder.simplePatientAndEncounterBundle());

        // test measurement period results
        validateMeasurementPeriod(report.getPeriod(), 2024, 0, 1, 2024, 11, 31);

        // test measure score is null
        Assertions.assertNull(report.getGroupFirstRep().getMeasureScore().getValue());

        // test population results
        Assertions.assertEquals(1, getPopulation("initial-population", report).getCount());
        Assertions.assertEquals(1, getPopulation("measure-population", report).getCount());
        Assertions.assertEquals(0, getPopulation("measure-population-exclusion", report).getCount());

        // test evaluated resources
        Assertions.assertTrue(report.hasEvaluatedResource());
        Assertions.assertEquals("Encounter/simple-encounter", report.getEvaluatedResourceFirstRep().getReference());
    }

    /**
     * Validates the measure package for errors using the MeasureDefinitionBundleValidator. Asserts that the measure
     * package has no validation errors.
     * @param measurePackage The FHIR Bundle containing the measure definition.
     */
    private void validateMeasurePackage(Bundle measurePackage) {
        var errors = new ArrayList<String>();
        var bundleValidator = new MeasureDefinitionBundleValidator();
        bundleValidator.doValidate(measurePackage, errors);
        Assertions.assertTrue(errors.isEmpty());
    }

    /**
     * Validates the measurement period against expected start and end dates. Asserts that the period’s start and
     * end dates match the expected values.
     * @param period The FHIR Period to validate.
     * @param expectedStartYear Expected start date year component.
     * @param expectedStartMonth Expected start date month component.
     * @param expectedStartDay Expected start date day component.
     * @param expectedEndYear Expected end date year component.
     * @param expectedEndMonth Expected end date month component.
     * @param expectedEndDay Expected end date day component.
     */
    private void validateMeasurementPeriod(
            Period period, int expectedStartYear, int expectedStartMonth, int expectedStartDay,
            int expectedEndYear, int expectedEndMonth, int expectedEndDay) {
        var calendar = Calendar.getInstance();
        calendar.setTime(period.getStart());
        Assertions.assertEquals(expectedStartYear, calendar.get(Calendar.YEAR));
        Assertions.assertEquals(expectedStartMonth, calendar.get(Calendar.MONTH)); // 0-based months
        Assertions.assertEquals(expectedStartDay, calendar.get(Calendar.DAY_OF_MONTH));
        calendar.setTime(period.getEnd());
        Assertions.assertEquals(expectedEndYear, calendar.get(Calendar.YEAR));
        Assertions.assertEquals(expectedEndMonth, calendar.get(Calendar.MONTH)); // 0-based months
        Assertions.assertEquals(expectedEndDay, calendar.get(Calendar.DAY_OF_MONTH));
    }

    /**
     * Retrieves a population component from the MeasureReport based on its code. Asserts that only one population
     * matches the code.
     * @param code The code of the population to retrieve.
     * @param report The FHIR MeasureReport.
     * @return MeasureReport.MeasureReportGroupPopulationComponent
     */
    private MeasureReport.MeasureReportGroupPopulationComponent getPopulation(String code, MeasureReport report) {
        var population = report.getGroupFirstRep().getPopulation().stream().filter(pop -> pop.getCode().getCodingFirstRep().getCode().equals(code)).toList();
        Assertions.assertEquals(1, population.size());
        return population.get(0);
    }
}
