trigger:
  branches:
    include:
    - release/*
    #- dev
  paths:
    include:
    - DotNet/*/Migrations
    - Java/validation/src/main/resources/database/migrations
    exclude:
    - '*'
    
pr: none

pool:
  vmImage: 'ubuntu-latest'

  #####################

stages:
- stage: Build
  jobs:
  # Account
  - job: Account
    displayName: "Generate Account Schema Script"
    steps:
      - task: DotNetCoreCLI@2
        displayName: Install dotnet-ef
        inputs:
         command: 'custom'
         custom: 'tool'
         arguments: 'install --global dotnet-ef'
      - script: |
         dotnet ef migrations script --idempotent --verbose -c AccountDbContext -s $(build.sourcesdirectory)/DotNet/Account/Account.csproj -p $(build.sourcesdirectory)/DotNet/Account/Account.csproj -o $(build.artifactstagingdirectory)/DatabaseScripts/accountDb.sql
        displayName: Generate Account SQL Script
      - task: PublishBuildArtifacts@1
        inputs:
         PathtoPublish: '$(Build.ArtifactStagingDirectory)'
         ArtifactName: 'scripts'
         publishLocation: 'container'
        displayName: Generate Tenant SQL Script  
  ###
  # Audit
  - job: Audit
    displayName: "Generate Audit Schema Script"
    steps:
      - task: DotNetCoreCLI@2
        displayName: Install dotnet-ef
        inputs:
         command: 'custom'
         custom: 'tool'
         arguments: 'install --global dotnet-ef'
      - script: |
         dotnet ef migrations script --idempotent --verbose -c AuditDbContext -s $(build.sourcesdirectory)/DotNet/Audit/Audit.csproj -p $(build.sourcesdirectory)/DotNet/Audit/Audit.csproj -o $(build.artifactstagingdirectory)/DatabaseScripts/auditDb.sql
        displayName: Generate Audit SQL Script
      - task: PublishBuildArtifacts@1
        inputs:
         PathtoPublish: '$(Build.ArtifactStagingDirectory)'
         ArtifactName: 'scripts'
         publishLocation: 'container'
        displayName: Generate Tenant SQL Script  
  ###
  # Census
  - job: Census
    displayName: "Generate Census Schema Script"
    steps:
      - task: DotNetCoreCLI@2
        displayName: Install dotnet-ef
        inputs:
         command: 'custom'
         custom: 'tool'
         arguments: 'install --global dotnet-ef'
      - script: |
         dotnet ef migrations script --idempotent --verbose -c CensusContext -s $(build.sourcesdirectory)/DotNet/Census/Census.csproj -p $(build.sourcesdirectory)/DotNet/Census/Census.csproj -o $(build.artifactstagingdirectory)/DatabaseScripts/censusDb.sql
        displayName: Generate Census SQL Script
      - task: PublishBuildArtifacts@1
        inputs:
         PathtoPublish: '$(Build.ArtifactStagingDirectory)'
         ArtifactName: 'scripts'
         publishLocation: 'container'
        displayName: Generate Tenant SQL Script  
  ###
  # DataAcquisition
  - job: DataAcquisition
    displayName: "Generate Data Acquisition Schema Script"
    steps:
      - task: DotNetCoreCLI@2
        displayName: Install dotnet-ef
        inputs:
         command: 'custom'
         custom: 'tool'
         arguments: 'install --global dotnet-ef'
      - script: |
         dotnet ef migrations script --idempotent --verbose -c DataAcquisitionDbContext -s $(build.sourcesdirectory)/DotNet/DataAcquisition/DataAcquisition.csproj -p $(build.sourcesdirectory)/DotNet/DataAcquisition.Domain/DataAcquisition.Domain.csproj -o $(build.artifactstagingdirectory)/DatabaseScripts/dataDb.sql
        displayName: Generate DataAcquisition SQL Script
      - task: PublishBuildArtifacts@1
        inputs:
         PathtoPublish: '$(Build.ArtifactStagingDirectory)'
         ArtifactName: 'scripts'
         publishLocation: 'container'
        displayName: Generate Tenant SQL Script  
  ###
  # Normalization
  - job: Normalization
    displayName: "Generate Normalization Schema Script"
    steps:
      - task: DotNetCoreCLI@2
        displayName: Install dotnet-ef
        inputs:
         command: 'custom'
         custom: 'tool'
         arguments: 'install --global dotnet-ef'
      - script: |
           dotnet ef migrations script --idempotent --verbose -c NormalizationDbContext -s $(build.sourcesdirectory)/DotNet/Normalization/Normalization.csproj -p $(build.sourcesdirectory)/DotNet/Normalization/Normalization.csproj -o $(build.artifactstagingdirectory)/DatabaseScripts/normalizationDb.sql
        displayName: Generate Normalization SQL Script
      - task: PublishBuildArtifacts@1
        inputs:
         PathtoPublish: '$(Build.ArtifactStagingDirectory)'
         ArtifactName: 'scripts'
         publishLocation: 'container'
        displayName: Generate Tenant SQL Script  
  ###
  # Notification
  # - job: Notification
  #   displayName: "Generate Notification Schema Script"
  #   dependsOn: getChangedFiles
  #   variables: 
  #     changed: $[ dependencies.getChangedFiles.outputs['setVariables.notificationChanged'] ]
  #   condition: eq(variables.changed, 'True')
  #   steps:
  #   - task: DotNetCoreCLI@2
  #     displayName: Install dotnet-ef
  #     inputs:
  #      command: 'custom'
  #      custom: 'tool'
  #      arguments: 'install --global dotnet-ef'
  #   - script: |
  #        dotnet ef migrations script --idempotent --verbose -c NotificationDbContext -s $(build.sourcesdirectory)/DotNet/Notification/Notification.csproj -p $(build.sourcesdirectory)/DotNet/Notification/Notification.csproj -o $(build.artifactstagingdirectory)/DatabaseScripts/notificationDb.sql
  #     displayName: Generate Notification SQL Script
  #   - task: PublishBuildArtifacts@1
  #     inputs:
  #      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
  #      ArtifactName: 'scripts'
  #      publishLocation: 'container'
  #     displayName: Generate Tenant SQL Script  
  ###
  # QueryDispatch
  - job: QueryDispatch
    displayName: "Generate QueryDispatch Schema Script"
    steps:
    - task: DotNetCoreCLI@2
      displayName: Install dotnet-ef
      inputs:
       command: 'custom'
       custom: 'tool'
       arguments: 'install --global dotnet-ef'
    - script: |
         dotnet ef migrations script --idempotent --verbose -c QueryDispatchDbContext -s $(build.sourcesdirectory)/DotNet/QueryDispatch/QueryDispatch.csproj -p $(build.sourcesdirectory)/DotNet/QueryDispatch/QueryDispatch.csproj -o $(build.artifactstagingdirectory)/DatabaseScripts/queryDispatchDb.sql
      displayName: Generate QueryDispatch SQL Script
    - task: PublishBuildArtifacts@1
      inputs:
       PathtoPublish: '$(Build.ArtifactStagingDirectory)'
       ArtifactName: 'scripts'
       publishLocation: 'container'
      displayName: Generate Tenant SQL Script  
  ###
  # Submission
  # - job: Submission
  #   displayName: "Build Submission"
  #   dependsOn: getChangedFiles
  #   variables: 
  #     changed: $[ dependencies.getChangedFiles.outputs['setVariables.submissionChanged'] ]
  #   condition: eq(variables.changed, 'True')
  #   steps:
  #   - task: DotNetCoreCLI@2
  #     displayName: Install dotnet-ef
  #     inputs:
  #      command: 'custom'
  #      custom: 'tool'
  #      arguments: 'install --global dotnet-ef'
  #   - script: |
  #        dotnet ef migrations script --idempotent --verbose -c TenantSubmissionDbContext -s $(build.sourcesdirectory)/DotNet/Submission/Submission.csproj -p $(build.sourcesdirectory)/DotNet/Submission/Submission.csproj -o $(build.artifactstagingdirectory)/DatabaseScripts/submissionDb.sql
  #     displayName: Generate Submission SQL Script
  #   - task: PublishBuildArtifacts@1
  #     inputs:
  #      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
  #      ArtifactName: 'scripts'
  #      publishLocation: 'container'
  #     displayName: Generate Tenant SQL Script  
  ###
  # Tenant
  - job: Tenant
    displayName: "Build Tenant"
    steps:
    - task: DotNetCoreCLI@2
      displayName: Install dotnet-ef
      inputs:
       command: 'custom'
       custom: 'tool'
       arguments: 'install --global dotnet-ef'
    - script: |
         dotnet ef migrations script --idempotent --verbose -c FacilityDbContext -s $(build.sourcesdirectory)/DotNet/Tenant/Tenant.csproj -p $(build.sourcesdirectory)/DotNet/Tenant/Tenant.csproj -o $(build.artifactstagingdirectory)/DatabaseScripts/tenantDb.sql
      displayName: Generate Tenant SQL Script
    - task: PublishBuildArtifacts@1
      inputs:
       PathtoPublish: '$(Build.ArtifactStagingDirectory)'
       ArtifactName: 'scripts'
       publishLocation: 'container'
      displayName: Generate Tenant SQL Script  
    ###
  # Validation
  - job: Validation
    displayName: "Build Validation"
    steps:
    - task: CopyFiles@2
      displayName: Copy Validation SQL Scripts to Artifact Staging Directory
      inputs:
       SourceFolder: '$(build.sourcesdirectory)/Java/validation/src/main/resources/database/migrations/'
       TargetFolder: $(Build.ArtifactStagingDirectory)/DatabaseScripts
       Contents: '*.sql'
    - task: PublishBuildArtifacts@1
      inputs:
       PathtoPublish: '$(Build.ArtifactStagingDirectory)'
       ArtifactName: 'scripts'
       publishLocation: 'container'
      displayName: Generate Validation SQL Script  
  ###
  # Publish
  # - job: Publish
  #   displayName: "Publish"
  #   dependsOn: 
  #   - getchangedFiles
  #   - Account 
  #   - Audit 
  #   - Census 
  #   - DataAcquisition 
  #   - Normalization 
  #   - Notification 
  #   - QueryDispatch 
  #   - Submission 
  #   - Tenant
  #   steps:
  #   - task: PublishBuildArtifacts@1
  #     inputs:
  #      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
  #      ArtifactName: 'scripts'
  #      publishLocation: 'container'
  #     displayName: Generate Tenant SQL Script  
  # ###
  # # Validation
  # - job: Validation
  #   displayName: "Build Validation"
  #   dependsOn: getChangedFiles
  #   variables: 
  #     changed: $[ dependencies.getChangedFiles.outputs['setVariables.validationChanged'] ]
  #   condition: or(eq(variables.changed, 'True'), eq('${{parameters.buildAll}}', 'True'))
  #   steps: 
  #   - task: Docker@2
  #     displayName: "Build & Push Validation"
  #     condition: always()
  #     inputs:
  #       containerRegistry: 'Link ACR'
  #       repository: $(Validation-Name)
  #       command: 'buildAndPush'
  #       Dockerfile: '**/Validation/Dockerfile'
  #       tags: '$(tags)'
  #       buildContext: '$(Build.Repository.LocalPath)'
  #   - task: Kubernetes@1
  #     displayName: "Deploy Validation"
  #     inputs:
  #       connectionType: 'Kubernetes Service Connection'
  #       kubernetesServiceEndpoint: 'Link BOTW'
  #       namespace: 'dev-scale'
  #       command: 'set'
  #       arguments: 'image -n dev-scale deployment validation-deploy validation=nhsnlink.azurecr.io/$(Validation-Name):$(Build.BuildId)'
  #       secretType: 'dockerRegistry'
  #       containerRegistryType: 'Azure Container Registry'

    
    