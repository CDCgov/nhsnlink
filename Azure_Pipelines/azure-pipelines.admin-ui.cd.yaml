resources:
  pipelines:
  - pipeline: pipeline-trigger
    source: Deploy_All_Services
    trigger: true

trigger:
  branches:
    include:
    - dev
    - release/*
    - linkathon/*
  paths:
    include:
    - Web/Admin.UI/*
    exclude:
    - '*'
    
pr: none

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: link-cloud-variables
- name: registry-repo-Name
  value: 'link-admin-ui'
- name: dockerPath
  value: '**/Web/Admin.UI/Dockerfile'
- name: workingDir
  value: 'Web/Admin.UI/'
- name: serviceName
  value: 'Admin.UI'

steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '18.x'
    displayName: 'Install Node.js'

  - task: Npm@1  
    displayName: 'Angular CLI 13.2.5'  
    inputs:  
      command: custom  
      verbose: false  
      customCommand: 'install -g @angular/cli'

  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: |
        GIT_COMMIT=$(git rev-parse --short HEAD)
        echo "GIT_COMMIT: ${GIT_COMMIT}"
        echo "##vso[task.setvariable variable=GIT_COMMIT]${GIT_COMMIT}"

  - task: Npm@1  
    displayName: 'npm install'  
    inputs:
      command: custom  
      workingDir: $(workingDir)
      customCommand: 'install'
      
  - task: Npm@1  
    displayName: Build  
    inputs: 
      command: custom  
      verbose: false 
      workingDir: $(workingDir)
      customCommand: 'run build'
  
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        if ("$(Build.SourceBranch)" -like "*release/*") {
        $myTag1 = "release-$(Build.SourceBranchName)-$(GIT_COMMIT)"
        }
        else { 
        $myTag1 = "$(Build.SourceBranchName)-$(GIT_COMMIT)"
        }
        Write-Host "##vso[task.setvariable variable=MyTag]$myTag1"
        Write-Host "Set MyTag to: $myTag1"
  - task: Docker@2
    displayName: "Build & Push DemoApiGateway Docker Image"
    condition: always()
    inputs:
      containerRegistry: $(containerRegistry) # Variable Group
      repository: $(registry-repo-name)
      command: 'buildAndPush'
      Dockerfile: $(dockerPath)
      tags: |
        latest
        $(MyTag)
      buildContext: '$(workingDir)'

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifact: 'manifest'
